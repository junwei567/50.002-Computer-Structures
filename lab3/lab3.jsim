.include "nominal.jsim"
.include "stdcell.jsim"
/* .include "lab3compare.jsim" */
/* .include "lab3boolean.jsim" */
/* .include "lab3adder.jsim" */
/* .include "lab3shifter.jsim" */
/* .include "lab3checkoff_6.jsim" */
.include "lab3multiply.jsim"


* FULL ADDER
.subckt fa a b cin s co
Xxor1 a b 1 xor2
Xxor2 cin 1 s xor2
Xand1 cin 1 n and2
Xand2 a b m and2
Xor1 m n co or2
.ends

* overflow v
.subckt ovaflow a b s v
Xinv1 s sinv inverter
Xand1 sinv a b ova1 and3
Xinv2 a ainv inverter
Xinv3 b binv inverter
Xand2 s ainv binv ova2 and3
Xor ova1 ova2 v or2
.ends

* zero z
.subckt zeroo s[31:0] z
Xnor41 s[7:0] s[15:8] s[23:16] s[31:24] ss[7:0] or4
Xnor42 ss[1:0] ss[3:2] ss[5:4] ss[7:6] sss[1:0] or4
Xnor1 sss[1:0] z nor2
.ends

* connecting
.subckt konac a b
.connect a b
.ends

// adder
.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n
Xtwoinv B[31:0] ALUFN0#32 bstar[31:0] xor2
/* Xfa0 A0 bstar0 ALUFN0 s0 c0 fa */
Xfa32 A[31:0] bstar[31:0] cin[31:0] s[31:0] cout[31:0] fa
.connect cin0 ALUFN0
Xconnect cin[31:1] cout[30:0] konac
.connect n s31
Xova A31 bstar31 s31 v ovaflow
Xzer s[31:0] z zeroo
.ends

// comparator
.subckt compare32 ALUFN[2:1] z v n cmp[31:0]
.connect cmp[31:1] 0
Xxorvn v n a_less_b xor2
Xorz a_less_b z a_eq_b or2
Xmux ALUFN1 ALUFN2 0 z a_less_b a_eq_b cmp0 mux4
* selector selector 00 10 01 11 --> ordering for a mux4
.ends

// boolean
.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]
Xmux A[31:0] B[31:0] ALUFN0#32 ALUFN1#32 ALUFN2#32 ALUFN3#32 boole[31:0] mux4
.ends

// shifter
.subckt lshift A[31:0] B[4:0] SL[31:0]
Xmux1 B4#32 A[31:0] A[15:0] 0#16 W[31:0] mux2
Xmux2 B3#32 W[31:0] W[23:0] 0#8 X[31:0] mux2
Xmux3 B2#32 X[31:0] X[27:0] 0#4 Y[31:0] mux2
Xmux4 B1#32 Y[31:0] Y[29:0] 0#2 Z[31:0] mux2
Xmux5 B0#32 Z[31:0] Z[30:0] 0 SL[31:0] mux2
.ends

.subckt rshift A[31:0] B[4:0] sign SR[31:0]
Xand sign A31 sbit and2
Xmux1 B4#32 A[31:0] sbit#16 A[31:16] W[31:0] mux2
Xmux2 B3#32 W[31:0] sbit#8 W[31:8] X[31:0] mux2
Xmux3 B2#32 X[31:0] sbit#4 X[31:4] Y[31:0] mux2
Xmux4 B1#32 Y[31:0] sbit#2 Y[31:2] Z[31:0] mux2
Xmux5 B0#32 Z[31:0] sbit Z[31:1] SR[31:0] mux2
.ends

.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]
Xlshift A[31:0] B[4:0] SL[31:0] lshift
Xrshift A[31:0] B[4:0] ALUFN1 SR[31:0] rshift
Xmux ALUFN0#32 SL[31:0] SR[31:0] shift[31:0] mux2
.ends

.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n
Xadd ALUFN0 A[31:0] B[31:0] sum[31:0] z v n adder32
Xbool ALUFN[3:0] A[31:0] B[31:0] bool[31:0] boole32
Xshift ALUFN[1:0] A[31:0] B[4:0] shift[31:0] shift32
Xcomp ALUFN[2:1] z v n comp[31:0] compare32
XMULT A[31:0] B[31:0] mul[31:0] mult32
*combine adder and multiplier to a mux2 all can fit into mux4
XmuxAM ALUFN1#32 sum[31:0] mul[31:0] muxAM[31:0] mux2

/* Xfinal ALUFN5#32 ALUFN4#32 sum[31:0] shift[31:0] bool[31:0] comp[31:0] alu[31:0] mux4 */
Xfinal ALUFN5#32 ALUFN4#32 muxAM[31:0] shift[31:0] bool[31:0] comp[31:0] alu[31:0] mux4
.ends


* multiplier

.subckt mult32 A[31:0] B[31:0] out[31:0]
* every and gatesss
Xand0 A[31:0] B[0]#32 and_a[31:0] and2
Xand1 A[30:0] B[1]#31 and_b[30:0] and2
Xand2 A[29:0] B[2]#30 and_c[29:0] and2
Xand3 A[28:0] B[3]#29 and_d[28:0] and2
Xand4 A[27:0] B[4]#28 and_e[27:0] and2
Xand5 A[26:0] B[5]#27 and_f[26:0] and2
Xand6 A[25:0] B[6]#26 and_g[25:0] and2
Xand7 A[24:0] B[7]#25 and_h[24:0] and2
Xand8 A[23:0] B[8]#24 and_i[23:0] and2
Xand9 A[22:0] B[9]#23 and_j[22:0] and2
Xand10 A[21:0] B[10]#22 and_k[21:0] and2
Xand11 A[20:0] B[11]#21 and_l[20:0] and2
Xand12 A[19:0] B[12]#20 and_m[19:0] and2
Xand13 A[18:0] B[13]#19 and_n[18:0] and2
Xand14 A[17:0] B[14]#18 and_o[17:0] and2
Xand15 A[16:0] B[15]#17 and_p[16:0] and2
Xand16 A[15:0] B[16]#16 and_q[15:0] and2
Xand17 A[14:0] B[17]#15 and_r[14:0] and2
Xand18 A[13:0] B[18]#14 and_s[13:0] and2
Xand19 A[12:0] B[19]#13 and_t[12:0] and2
Xand20 A[11:0] B[20]#12 and_u[11:0] and2
Xand21 A[10:0] B[21]#11 and_v[10:0] and2
Xand22 A[9:0] B[22]#10 and_w[9:0] and2
Xand23 A[8:0] B[23]#9 and_x[8:0] and2
Xand24 A[7:0] B[24]#8 and_y[7:0] and2
Xand25 A[6:0] B[25]#7 and_z[6:0] and2
Xand26 A[5:0] B[26]#6 and_aa[5:0] and2
Xand27 A[4:0] B[27]#5 and_ab[4:0] and2
Xand28 A[3:0] B[28]#4 and_ac[3:0] and2
Xand29 A[2:0] B[29]#3 and_ad[2:0] and2
Xand30 A[1:0] B[30]#2 and_ae[1:0] and2
Xand31 A0 B[31] and_af0 and2
* first bit output
.connect out0 and_a0

Xfaa1 and_a1 and_b0 0 out1 co_b0 fa
Xfab1 and_a[31:2] and_b[30:1] co_b[29:0] sum_b[29:0] co_b[30:1] fa
Xfaa2 sum_b0 and_c0 0 out2 co_c0 fa
Xfab2 sum_b[29:1] and_c[29:1] co_c[28:0] sum_c[28:0] co_c[29:1] fa
Xfaa3 sum_c0 and_d0 0 out3 co_d0 fa
Xfab3 sum_c[28:1] and_d[28:1] co_d[27:0] sum_d[27:0] co_d[28:1] fa
Xfaa4 sum_d0 and_e0 0 out4 co_e0 fa
Xfab4 sum_d[27:1] and_e[27:1] co_e[26:0] sum_e[26:0] co_e[27:1] fa
Xfaa5 sum_e0 and_f0 0 out5 co_f0 fa
Xfab5 sum_e[26:1] and_f[26:1] co_f[25:0] sum_f[25:0] co_f[26:1] fa
Xfaa6 sum_f0 and_g0 0 out6 co_g0 fa
Xfab6 sum_f[25:1] and_g[25:1] co_g[24:0] sum_g[24:0] co_g[25:1] fa
Xfaa7 sum_g0 and_h0 0 out7 co_h0 fa
Xfab7 sum_g[24:1] and_h[24:1] co_h[23:0] sum_h[23:0] co_h[24:1] fa
Xfaa8 sum_h0 and_i0 0 out8 co_i0 fa
Xfab8 sum_h[23:1] and_i[23:1] co_i[22:0] sum_i[22:0] co_i[23:1] fa
Xfaa9 sum_i0 and_j0 0 out9 co_j0 fa
Xfab9 sum_i[22:1] and_j[22:1] co_j[21:0] sum_j[21:0] co_j[22:1] fa
Xfaa10 sum_j0 and_k0 0 out10 co_k0 fa
Xfab10 sum_j[21:1] and_k[21:1] co_k[20:0] sum_k[20:0] co_k[21:1] fa
Xfaa11 sum_k0 and_l0 0 out11 co_l0 fa
Xfab11 sum_k[20:1] and_l[20:1] co_l[19:0] sum_l[19:0] co_l[20:1] fa
Xfaa12 sum_l0 and_m0 0 out12 co_m0 fa
Xfab12 sum_l[19:1] and_m[19:1] co_m[18:0] sum_m[18:0] co_m[19:1] fa
Xfaa13 sum_m0 and_n0 0 out13 co_n0 fa
Xfab13 sum_m[18:1] and_n[18:1] co_n[17:0] sum_n[17:0] co_n[18:1] fa
Xfaa14 sum_n0 and_o0 0 out14 co_o0 fa
Xfab14 sum_n[17:1] and_o[17:1] co_o[16:0] sum_o[16:0] co_o[17:1] fa
Xfaa15 sum_o0 and_p0 0 out15 co_p0 fa
Xfab15 sum_o[16:1] and_p[16:1] co_p[15:0] sum_p[15:0] co_p[16:1] fa
Xfaa16 sum_p0 and_q0 0 out16 co_q0 fa
Xfab16 sum_p[15:1] and_q[15:1] co_q[14:0] sum_q[14:0] co_q[15:1] fa
Xfaa17 sum_q0 and_r0 0 out17 co_r0 fa
Xfab17 sum_q[14:1] and_r[14:1] co_r[13:0] sum_r[13:0] co_r[14:1] fa
Xfaa18 sum_r0 and_s0 0 out18 co_s0 fa
Xfab18 sum_r[13:1] and_s[13:1] co_s[12:0] sum_s[12:0] co_s[13:1] fa
Xfaa19 sum_s0 and_t0 0 out19 co_t0 fa
Xfab19 sum_s[12:1] and_t[12:1] co_t[11:0] sum_t[11:0] co_t[12:1] fa
Xfaa20 sum_t0 and_u0 0 out20 co_u0 fa
Xfab20 sum_t[11:1] and_u[11:1] co_u[10:0] sum_u[10:0] co_u[11:1] fa
Xfaa21 sum_u0 and_v0 0 out21 co_v0 fa
Xfab21 sum_u[10:1] and_v[10:1] co_v[9:0] sum_v[9:0] co_v[10:1] fa
Xfaa22 sum_v0 and_w0 0 out22 co_w0 fa
Xfab22 sum_v[9:1] and_w[9:1] co_w[8:0] sum_w[8:0] co_w[9:1] fa
Xfaa23 sum_w0 and_x0 0 out23 co_x0 fa
Xfab23 sum_w[8:1] and_x[8:1] co_x[7:0] sum_x[7:0] co_x[8:1] fa
Xfaa24 sum_x0 and_y0 0 out24 co_y0 fa
Xfab24 sum_x[7:1] and_y[7:1] co_y[6:0] sum_y[6:0] co_y[7:1] fa
Xfaa25 sum_y0 and_z0 0 out25 co_z0 fa
Xfab25 sum_y[6:1] and_z[6:1] co_z[5:0] sum_z[5:0] co_z[6:1] fa
Xfaa26 sum_z0 and_aa0 0 out26 co_aa0 fa
Xfab26 sum_z[5:1] and_aa[5:1] co_aa[4:0] sum_aa[4:0] co_aa[5:1] fa
Xfaa27 sum_aa0 and_ab0 0 out27 co_ab0 fa
Xfab27 sum_aa[4:1] and_ab[4:1] co_ab[3:0] sum_ab[3:0] co_ab[4:1] fa
Xfaa28 sum_ab0 and_ac0 0 out28 co_ac0 fa
Xfab28 sum_ab[3:1] and_ac[3:1] co_ac[2:0] sum_ac[2:0] co_ac[3:1] fa
Xfaa29 sum_ac0 and_ad0 0 out29 co_ad0 fa
Xfab29 sum_ac[2:1] and_ad[2:1] co_ad[1:0] sum_ad[1:0] co_ad[2:1] fa
Xfaa30 sum_ad0 and_ae0 0 out30 co_ae0 fa
Xfab30 sum_ad1 and_ae1 co_ae0 sum_ae0 co_ae1 fa
Xfaa31 sum_ae0 and_af0 0 out31 co_af fa
.ends
